par(mfrow = c(2,2))
plot(
fitted(model),
resid(model),
pch = pointtype,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Fitted vs Residuals",
col = pointcol
)
abline(h = 0, lwd = 2, col = linecol)
qqnorm(
resid(model),
pch = pointtype,
main = "QQNorm Plot",
col = pointcol
)
qqline(
resid(model),
lwd = 2,
col = linecol
)
hist(
resid(model)
)
}
if (tests == TRUE) {
ad_test = ad.test(resid(model))
bp_test = bptest(model)
test_results = data.frame(
"Anderson-Darling Normality Test" = c("Test Statistic" = ad_test$statistic,
"P-Value" = ad_test$p.value,
"Result" = ifelse(ad_test$p.value < alpha, "Reject", "Fail To Reject")
),
"Breusch-Pagan Test" = c("Test Statistic" = bp_test$statistic,
"P-Value" = bp_test$p.value,
"Result" = ifelse(bp_test$p.value < alpha, "Reject", "Fail To Reject")
)
)
kable(t(test_results), col.names = c("Test Statistic", "P-Value", "Decision"))
}
}
diagnostics = function(model, alpha = .05, pointcol = "orange", linecol = "blue", plots = TRUE, tests = TRUE, pointtype = 16) {
if (plots == TRUE) {
par(mfrow = c(2,2))
plot(
fitted(model),
resid(model),
pch = pointtype,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Fitted vs Residuals",
col = pointcol
)
abline(h = 0, lwd = 2, col = linecol)
qqnorm(
resid(model),
pch = pointtype,
main = "QQNorm Plot",
col = pointcol
)
qqline(
resid(model),
lwd = 2,
col = linecol
)
hist(
resid(model)
)
}
if (tests == TRUE) {
ad_test = ad.test(resid(model))
bp_test = bptest(model)
test_results = data.frame(
"Anderson-Darling Normality Test" = c("Test Statistic" = ad_test$statistic,
"P-Value" = ad_test$p.value,
"Result" = ifelse(ad_test$p.value < alpha, "Reject", "Fail To Reject")
),
"Breusch-Pagan Test" = c("Test Statistic" = bp_test$statistic,
"P-Value" = bp_test$p.value,
"Result" = ifelse(bp_test$p.value < alpha, "Reject", "Fail To Reject")
)
)
kable(t(test_results), col.names = c("Test Statistic", "P-Value", "Decision"), digits = 2)
}
}
diagnostics(back_twoway_mod_finish_aic)
diagnostics(best_leaps_model_1)
diagnostics(back_aic_mod_2)
diagnostics(best_leaps_model_3)
aic_beginning_mods = data.frame(
"Total Predictors" = c("Leaps Model 1" = extractAIC(best_leaps_model_1)[1],
"Leaps Model 2" = extractAIC(best_leaps_model_2)[1],
"Leaps Model 3" = extractAIC(best_leaps_model_3)[1],
"Two-Way Int. Model" = extractAIC(full_twoway_model)[1]
),
"AIC" = c(
"Leaps Model 1" = extractAIC(best_leaps_model_1)[2],
"Leaps Model 2" = extractAIC(best_leaps_model_2)[2],
"Leaps Model 3" = extractAIC(best_leaps_model_3)[2],
"Two-Way Int. Model" = extractAIC(full_twoway_model)[2]
)
)
kable(aic_beginning_mods, align = c("l", "r"))
aic_beginning_mods = data.frame(
"Total Predictors" = c("Leaps Model 1" = extractAIC(best_leaps_model_1)[1],
"Leaps Model 2" = extractAIC(best_leaps_model_2)[1],
"Leaps Model 3" = extractAIC(best_leaps_model_3)[1],
"Two-Way Int. Model" = extractAIC(full_twoway_model)[1]
),
"AIC" = c(
"Leaps Model 1" = extractAIC(best_leaps_model_1)[2],
"Leaps Model 2" = extractAIC(best_leaps_model_2)[2],
"Leaps Model 3" = extractAIC(best_leaps_model_3)[2],
"Two-Way Int. Model" = extractAIC(full_twoway_model)[2]
)
)
kable(aic_beginning_mods, align = c("c", "r"))
if(!require(Cairo)) install.packages("Cairo", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(car)) install.packages("car", repos = "http://cran.us.r-project.org")
if(!require(nortest)) install.packages("nortest", repos = "http://cran.us.r-project.org")
library(readr)
library(ggplot2)
library(knitr)
library(tidyverse)
library(caret)
library(leaps)
library(car)
library(mice)
library(scales)
library(RColorBrewer)
library(plotly)
library(nortest)
library(lmtest)
housing_data = read_csv("housing.csv")
housing_data$median_house_value[1:100] #<- Do we need this in the final submission? I am thinking we can remove it.
summary(housing_data)
plot_map = ggplot(housing_data,
aes(x = longitude, y = latitude, color = median_house_value,
hma = housing_median_age, tr = total_rooms, tb = total_bedrooms,
hh = households, mi = median_income)) +
geom_point(aes(size = population), alpha = 0.4) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Data Map - Longtitude vs Latitude and Associated Variables") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_distiller(palette = "Paired", labels = comma) +
labs(color = "Median House Value (in $USD)", size = "Population")
plot_map_tt = ggplotly(plot_map)
plot_map_tt
diagnostics = function(model, alpha = .05, pointcol = "orange", linecol = "blue", plots = TRUE, tests = TRUE, pointtype = 16) {
if (plots == TRUE) {
par(mfrow = c(3,1))
plot(
fitted(model),
resid(model),
pch = pointtype,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Fitted vs Residuals",
col = pointcol
)
abline(h = 0, lwd = 2, col = linecol)
qqnorm(
resid(model),
pch = pointtype,
main = "QQNorm Plot",
col = pointcol
)
qqline(
resid(model),
lwd = 2,
col = linecol
)
hist(
resid(model)
)
}
if (tests == TRUE) {
ad_test = ad.test(resid(model))
bp_test = bptest(model)
test_results = data.frame(
"Anderson-Darling Normality Test" = c("Test Statistic" = ad_test$statistic,
"P-Value" = ad_test$p.value,
"Result" = ifelse(ad_test$p.value < alpha, "Reject", "Fail To Reject")
),
"Breusch-Pagan Test" = c("Test Statistic" = bp_test$statistic,
"P-Value" = bp_test$p.value,
"Result" = ifelse(bp_test$p.value < alpha, "Reject", "Fail To Reject")
)
)
kable(t(test_results), col.names = c("Test Statistic", "P-Value", "Decision"), digits = 2)
}
}
diagnostics(back_twoway_mod_finish_aic)
diagnostics(best_leaps_model_1)
diagnostics(back_aic_mod_2)
diagnostics(best_leaps_model_3)
diagnostics = function(model, alpha = .05, pointcol = "orange", linecol = "blue", plots = TRUE, tests = TRUE, pointtype = 16) {
if (plots == TRUE) {
par(mfrow = c(1, 3))
plot(
fitted(model),
resid(model),
pch = pointtype,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Fitted vs Residuals",
col = pointcol
)
abline(h = 0, lwd = 2, col = linecol)
qqnorm(
resid(model),
pch = pointtype,
main = "QQNorm Plot",
col = pointcol
)
qqline(
resid(model),
lwd = 2,
col = linecol
)
hist(
resid(model)
)
}
if (tests == TRUE) {
ad_test = ad.test(resid(model))
bp_test = bptest(model)
test_results = data.frame(
"Anderson-Darling Normality Test" = c("Test Statistic" = ad_test$statistic,
"P-Value" = ad_test$p.value,
"Result" = ifelse(ad_test$p.value < alpha, "Reject", "Fail To Reject")
),
"Breusch-Pagan Test" = c("Test Statistic" = bp_test$statistic,
"P-Value" = bp_test$p.value,
"Result" = ifelse(bp_test$p.value < alpha, "Reject", "Fail To Reject")
)
)
kable(t(test_results), col.names = c("Test Statistic", "P-Value", "Decision"), digits = 2)
}
}
diagnostics(back_twoway_mod_finish_aic)
diagnostics(best_leaps_model_1)
diagnostics(back_aic_mod_2)
diagnostics(best_leaps_model_3)
?par
diagnostics = function(model, alpha = .05, pointcol = "orange", linecol = "blue", plots = TRUE, tests = TRUE, pointtype = 16) {
if (plots == TRUE) {
par(mfrow = c(1, 3))
plot(
fitted(model),
resid(model),
pch = pointtype,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Fitted vs Residuals",
col = pointcol
)
abline(h = 0, lwd = 2, col = linecol)
qqnorm(
resid(model),
pch = pointtype,
main = "QQNorm Plot",
col = pointcol
)
qqline(
resid(model),
lwd = 2,
col = linecol
)
hist(
resid(model),
main = "Histogram of Residuals",
col = "orange",
xlab = "Residuals",
ylab = "Frequency"
)
}
if (tests == TRUE) {
ad_test = ad.test(resid(model))
bp_test = bptest(model)
test_results = data.frame(
"Anderson-Darling Normality Test" = c("Test Statistic" = ad_test$statistic,
"P-Value" = ad_test$p.value,
"Result" = ifelse(ad_test$p.value < alpha, "Reject", "Fail To Reject")
),
"Breusch-Pagan Test" = c("Test Statistic" = bp_test$statistic,
"P-Value" = bp_test$p.value,
"Result" = ifelse(bp_test$p.value < alpha, "Reject", "Fail To Reject")
)
)
kable(t(test_results), col.names = c("Test Statistic", "P-Value", "Decision"), digits = 2)
}
}
diagnostics(back_twoway_mod_finish_aic)
diagnostics(best_leaps_model_1)
diagnostics(back_aic_mod_2)
diagnostics(best_leaps_model_3)
diagnostics = function(model, alpha = .05, pointcol = "orange", linecol = "blue", plots = TRUE, tests = TRUE, pointtype = 16) {
if (plots == TRUE) {
par(mfrow = c(1, 3))
plot(
fitted(model),
resid(model),
pch = pointtype,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Fitted vs Residuals",
col = pointcol
)
abline(h = 0, lwd = 2, col = linecol)
qqnorm(
resid(model),
pch = pointtype,
main = "QQNorm Plot",
col = pointcol
)
qqline(
resid(model),
lwd = 2,
col = linecol
)
hist(
resid(model),
main = "Histogram of Residuals",
col = pointcol,
xlab = "Residuals",
ylab = "Frequency"
)
}
if (tests == TRUE) {
ad_test = ad.test(resid(model))
bp_test = bptest(model)
test_results = data.frame(
"Anderson-Darling Normality Test" = c("Test Statistic" = ad_test$statistic,
"P-Value" = ad_test$p.value,
"Result" = ifelse(ad_test$p.value < alpha, "Reject", "Fail To Reject")
),
"Breusch-Pagan Test" = c("Test Statistic" = bp_test$statistic,
"P-Value" = bp_test$p.value,
"Result" = ifelse(bp_test$p.value < alpha, "Reject", "Fail To Reject")
)
)
kable(t(test_results), col.names = c("Test Statistic", "P-Value", "Decision"), digits = 2)
}
}
diagnostics = function(model, alpha = .05, pointcol = "orange", linecol = "blue", plots = TRUE, tests = TRUE, pointtype = 16) {
if (plots == TRUE) {
par(mfrow = c(1, 3))
plot(
fitted(model),
resid(model),
pch = pointtype,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Fitted vs Residuals",
col = pointcol
)
abline(h = 0, lwd = 2, col = linecol)
qqnorm(
resid(model),
pch = pointtype,
main = "QQNorm Plot",
col = pointcol
)
qqline(
resid(model),
lwd = 2,
col = linecol
)
hist(
resid(model),
main = "Histogram of Residuals",
col = pointcol,
xlab = "Residuals",
ylab = "Frequency"
)
}
if (tests == TRUE) {
ad_test = ad.test(resid(model))
bp_test = bptest(model)
test_results = data.frame(
"Anderson-Darling Normality Test" = c("Test Statistic" = ad_test$statistic,
"P-Value" = ad_test$p.value,
"Result" = ifelse(ad_test$p.value < alpha, "Reject", "Fail To Reject")
),
"Breusch-Pagan Test" = c("Test Statistic" = bp_test$statistic,
"P-Value" = bp_test$p.value,
"Result" = ifelse(bp_test$p.value < alpha, "Reject", "Fail To Reject")
)
)
kable(t(test_results), col.names = c("Test Statistic", "P-Value", "Decision"), digits = 5)
}
}
diagnostics(back_twoway_mod_finish_aic)
diagnostics(best_leaps_model_1)
diagnostics(back_aic_mod_2)
diagnostics(best_leaps_model_3)
?round
?round
round(1000.0030932, 5)
round(1000.0030932, 7)
round(1000.0030932, 10)
round(1920832, 3)
round(1920832, digits = 3)
?round
signif(139283, 3)
trunc(1020398, 3)
round(12038.98333, 1)
round(12038.98333, 2)
diagnostics = function(model, alpha = .05, pointcol = "orange", linecol = "blue", plots = TRUE, tests = TRUE, pointtype = 16) {
if (plots == TRUE) {
par(mfrow = c(1, 3))
plot(
fitted(model),
resid(model),
pch = pointtype,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Fitted vs Residuals",
col = pointcol
)
abline(h = 0, lwd = 2, col = linecol)
qqnorm(
resid(model),
pch = pointtype,
main = "QQNorm Plot",
col = pointcol
)
qqline(
resid(model),
lwd = 2,
col = linecol
)
hist(
resid(model),
main = "Histogram of Residuals",
col = pointcol,
xlab = "Residuals",
ylab = "Frequency"
)
}
if (tests == TRUE) {
ad_test = ad.test(resid(model))
bp_test = bptest(model)
test_results = data.frame(
"Anderson-Darling Normality Test" = c("Test Statistic" = round(ad_test$statistic, 5),
"P-Value" = round(ad_test$p.value, 5),
"Result" = ifelse(ad_test$p.value < alpha, "Reject", "Fail To Reject")
),
"Breusch-Pagan Test" = c("Test Statistic" = round(bp_test$statistic, 5),
"P-Value" = round(bp_test$p.value, 5),
"Result" = ifelse(bp_test$p.value < alpha, "Reject", "Fail To Reject")
)
)
kable(t(test_results), col.names = c("Test Statistic", "P-Value", "Decision"), digits = 5)
}
}
diagnostics = function(model, alpha = .05, pointcol = "orange", linecol = "blue", plots = TRUE, tests = TRUE, pointtype = 16) {
if (plots == TRUE) {
par(mfrow = c(1, 3))
plot(
fitted(model),
resid(model),
pch = pointtype,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Fitted vs Residuals",
col = pointcol
)
abline(h = 0, lwd = 2, col = linecol)
qqnorm(
resid(model),
pch = pointtype,
main = "QQNorm Plot",
col = pointcol
)
qqline(
resid(model),
lwd = 2,
col = linecol
)
hist(
resid(model),
main = "Histogram of Residuals",
col = pointcol,
xlab = "Residuals",
ylab = "Frequency"
)
}
if (tests == TRUE) {
ad_test = ad.test(resid(model))
bp_test = bptest(model)
test_results = data.frame(
"Anderson-Darling Normality Test" = c("Test Statistic" = round(ad_test$statistic, 5),
"P-Value" = round(ad_test$p.value, 5),
"Result" = ifelse(ad_test$p.value < alpha, "Reject", "Fail To Reject")
),
"Breusch-Pagan Test" = c("Test Statistic" = round(bp_test$statistic, 5),
"P-Value" = round(bp_test$p.value, 5),
"Result" = ifelse(bp_test$p.value < alpha, "Reject", "Fail To Reject")
)
)
kable(t(test_results), col.names = c("Test Statistic", "P-Value", "Decision"))
}
}
diagnostics(back_twoway_mod_finish_aic)
diagnostics(best_leaps_model_1)
diagnostics(back_aic_mod_2)
diagnostics(best_leaps_model_3)
